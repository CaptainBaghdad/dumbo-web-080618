{"ast":null,"code":"import _defineProperty from \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/src/Components/Form.js\";\nimport React, { Component } from 'react';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      name: \"\",\n      img: \"\"\n    };\n\n    _this.changeHandler = function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    };\n\n    _this.submitHandler = function (event) {\n      //Prevent default to prevent page from automatically reloading after form submission\n      event.preventDefault(); //invoke callback function handleSubmit which was passed to this component as a prop from it's parent container\n      //then pass the current state as an argument to the handleSubmit callback function so that the parent container now has the information it needs to update its state\n\n      _this.props.handleSubmit(_this.state); //set state for form component so that the input values go back to an empty string. This allows the input fields to clear once the user submits the form\n\n\n      _this.setState({\n        name: \"\",\n        img: \"\"\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"form\", {\n        onSubmit: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\" //set value equal to current state so that the form can display the correct value in the input\n        ,\n        value: this.state.name,\n        name: \"name\" //add onChange event listener that allows us to set state every time the user types a character\n        ,\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\" //set value equal to current state so that the form can display the correct value in the input\n        ,\n        value: this.state.img,\n        name: \"img\" //add onChange event listener that allows us to set state every time the user types a character\n        ,\n        onChange: this.changeHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }), \"//You must simply lay the slay\", React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"Lay The Slay\"));\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nexport default Form;","map":{"version":3,"sources":["/Users/tashawn.williams/Development/lectureNotes/dumbo-web-080618/28_react_state_events_and_forms/src/Components/Form.js"],"names":["React","Component","Form","state","name","img","changeHandler","event","setState","target","value","submitHandler","preventDefault","props","handleSubmit"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;IAEMC,I;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,GAAG,EAAE;AAFC,K;;UAMRC,a,GAAgB,UAACC,KAAD,EAAW;AACzB,YAAKC,QAAL,qBACGD,KAAK,CAACE,MAAN,CAAaL,IADhB,EACuBG,KAAK,CAACE,MAAN,CAAaC,KADpC;AAGD,K;;UAGDC,a,GAAgB,UAACJ,KAAD,EAAW;AAC7B;AACIA,MAAAA,KAAK,CAACK,cAAN,GAFyB,CAG7B;AACA;;AACI,YAAKC,KAAL,CAAWC,YAAX,CAAwB,MAAKX,KAA7B,EALyB,CAM7B;;;AACI,YAAKK,QAAL,CAAc;AACZJ,QAAAA,IAAI,EAAE,EADM;AAEZC,QAAAA,GAAG,EAAE;AAFO,OAAd;AAID,K;;;;;;;6BAGO;AACN,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKM,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACA,QAAA,IAAI,EAAC,MADL,CAEN;AAFM;AAGA,QAAA,KAAK,EAAG,KAAKR,KAAL,CAAWC,IAHnB;AAIA,QAAA,IAAI,EAAC,MAJL,CAKN;AALM;AAMA,QAAA,QAAQ,EAAE,KAAKE,aANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EASE;AACA,QAAA,IAAI,EAAC,MADL,CAEN;AAFM;AAGA,QAAA,KAAK,EAAG,KAAKH,KAAL,CAAWE,GAHnB;AAIA,QAAA,IAAI,EAAC,KAJL,CAKN;AALM;AAMA,QAAA,QAAQ,EAAE,KAAKC,aANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,oCAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAlBF,CADF;AAsBD;;;;EApDgBL,S;;AAuDnB,eAAeC,IAAf","sourcesContent":["import React, {Component} from 'react'\n\nclass Form extends Component{\n  //create state as a way for form to retain the name and img that the user types\n  state = {\n    name: \"\",\n    img: \"\"\n  }\n\n\n  changeHandler = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n//Created submitHandler method to make it easier to pass this.state as an argument to the handleSubmit callback function that was given to this component as a prop from it's parent container (App.js)\n  submitHandler = (event) => {\n//Prevent default to prevent page from automatically reloading after form submission\n    event.preventDefault()\n//invoke callback function handleSubmit which was passed to this component as a prop from it's parent container\n//then pass the current state as an argument to the handleSubmit callback function so that the parent container now has the information it needs to update its state\n    this.props.handleSubmit(this.state)\n//set state for form component so that the input values go back to an empty string. This allows the input fields to clear once the user submits the form\n    this.setState({\n      name: \"\",\n      img: \"\"\n    })\n  }\n\n\n  render(){\n    return (\n      <form onSubmit={this.submitHandler}>\n        <input\n        type=\"text\"\n  //set value equal to current state so that the form can display the correct value in the input\n        value= {this.state.name}\n        name=\"name\"\n  //add onChange event listener that allows us to set state every time the user types a character\n        onChange={this.changeHandler}\n        />\n        <input\n        type=\"text\"\n  //set value equal to current state so that the form can display the correct value in the input\n        value= {this.state.img}\n        name=\"img\"\n  //add onChange event listener that allows us to set state every time the user types a character\n        onChange={this.changeHandler}\n        />\n  //You must simply lay the slay\n        <button>Lay The Slay</button>\n      </form>\n    )\n  }\n}\n\nexport default Form\n"]},"metadata":{},"sourceType":"module"}